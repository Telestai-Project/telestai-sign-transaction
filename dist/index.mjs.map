{"mappings":";;;;;;;;AAcO,SAAS,0CACd,OAA2B,EAC3B,iBAAyB,EACzB,KAAmB,EACnB,WAAgB;IAEhB,kDAAkD;IAClD,MAAM,sBAAsB;QAC1B,MAAM;QACN,MAAM;QACN,eAAe;QACf,eAAe;QACf,kBAAkB;QAClB,MAAM;QACN,SAAS;QACT,UAAU;YAAE,OAAO;QAAW;QAC9B,UAAU;YACR;YACA;YACA;SACD;QACD,UAAU;YACR,OAAO;gBAAE,SAAS;gBAAU,QAAQ;YAAS;YAC7C,OAAO;YACP,SAAS;YACT,QAAQ;YACR,YAAY;QACd;IACF;IAEA,MAAM,gBAAgB;QACpB,KAAK;IAEP;IAEA,MAAM,OAAO,aAAa,CAAC,QAAQ;IAEnC,IAAI,CAAC,MACH,MAAM,IAAI,MACR;IAIJ,YAAY;IACZ,MAAM,WAAW,CAAA,GAAA,kBAAU,EAAE;IAE7B,MAAM,KAAK,mBAAoB,OAAO,CAAC;IACvC,MAAM,MAAM,0BAA2B,eAAe,CAAC,IAAI;IAE3D,SAAS,oBAAoB,OAAO;QAClC,MAAM,MAAM,WAAW,CAAC,QAAQ;QAChC,MAAM,UAAU,cAAe,OAAO,CAAC,KAAK;QAC5C,OAAO;IACT;IAEA,SAAS,QAAQ,aAAa,EAAE,KAAK;QACnC,OAAO,MAAM,IAAI,CAAC,CAAC;YACjB,OAAO,KAAK,IAAI,KAAK,iBAAiB,KAAK,WAAW,KAAK;QAC7D;IACF;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,MAAM,EAAE,IAAK;QACtC,MAAM,QAAQ,GAAG,GAAG,CAAC,EAAE;QAEvB,MAAM,OAAO,iCAAO,IAAI,CAAC,MAAM,IAAI,EAAE,OAAO,OAAO,GAAG,QAAQ,CAAC;QAC/D,MAAM,OAAO,QAAQ,MAAM,MAAM,KAAK;QACtC,IAAI,CAAC,MACH,MAAM,MAAM,mCAAmC;QAEjD,MAAM,UAAU,KAAK,OAAO;QAC5B,MAAM,UAAU,oBAAoB;QAEpC,MAAM,aAAa;YACjB,mBAAmB;YACnB,KAAK;qBACL;YACA,MAAM;QACR;QACA,IAAI,IAAI,CAAC;IACX;IACA,MAAM,cAAc,IAAI,KAAK,GAAG,KAAK;IACrC,OAAO;AACT;IACA,2CAAe;UACb;AACF","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\nimport { toBitcoinJS } from \"@hyperbitjs/chains\";\n\ninterface IUTXO {\n  address: string;\n  assetName: string;\n  txid: string;\n  outputIndex: number;\n  script: string;\n  satoshis: number;\n  height?: number;\n  value: number;\n}\n\nexport function sign(\n  network: \"tls\" | \"tls-test\",\n  rawTransactionHex: string,\n  UTXOs: Array<IUTXO>,\n  privateKeys: any\n): string {\n  // Manually define the Telestai network parameters\n  const telestaiMainNetwork = {\n    name: 'Telestai',\n    unit: 'TLS',\n    decimalPlaces: 100000000,\n    messagePrefix: '\\x19Telestai Signed Message:\\n',\n    hashGenesisBlock: '0x00000056b9854abf830236d77443a8e3556f0244265e3eb12281a7bc43b7ff57',\n    port: 8767,\n    portRpc: 18766,\n    protocol: { magic: 1414025797 },\n    seedsDns: [\n      '45.79.159.32',\n      'dnsseed.telestainodes.xyz',\n      'telestai.seeds.multicoin.co'\n    ],\n    versions: {\n      bip32: { private: 70615956, public: 70617039 },\n      bip44: 10117,\n      private: 128,\n      public: 66,\n      scripthash: 127\n    }\n  };\n\n  const networkMapper = {\n    tls: telestaiMainNetwork,\n    // \"tls-test\": telestaiTestNetwork, // Define this if needed\n  };\n\n  const coin = networkMapper[network];\n\n  if (!coin) {\n    throw new Error(\n      \"Validation error, first argument network must be tls, tls-test\"\n    );\n  }\n\n  //@ts-ignore\n  const TELESTAI = toBitcoinJS(coin);\n\n  const tx = bitcoin.Transaction.fromHex(rawTransactionHex);\n  const txb = bitcoin.TransactionBuilder.fromTransaction(tx, TELESTAI);\n\n  function getKeyPairByAddress(address) {\n    const wif = privateKeys[address];\n    const keyPair = bitcoin.ECPair.fromWIF(wif, TELESTAI);\n    return keyPair;\n  }\n\n  function getUTXO(transactionId, index) {\n    return UTXOs.find((utxo) => {\n      return utxo.txid === transactionId && utxo.outputIndex === index;\n    });\n  }\n\n  for (let i = 0; i < tx.ins.length; i++) {\n    const input = tx.ins[i];\n\n    const txId = Buffer.from(input.hash, \"hex\").reverse().toString(\"hex\");\n    const utxo = getUTXO(txId, input.index);\n    if (!utxo) {\n      throw Error(\"Could not find UTXO for input \" + input);\n    }\n    const address = utxo.address;\n    const keyPair = getKeyPairByAddress(address);\n\n    const signParams = {\n      prevOutScriptType: \"p2pkh\",\n      vin: i,\n      keyPair,\n      UTXO: utxo,\n    };\n    txb.sign(signParams);\n  }\n  const signedTxHex = txb.build().toHex();\n  return signedTxHex;\n}\nexport default {\n  sign,\n};\n"],"names":[],"version":3,"file":"index.mjs.map"}