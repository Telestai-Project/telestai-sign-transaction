{"mappings":"AAGA;IACE,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,KAAK,EAAE,MAAM,CAAC;CACf;AAED,qBACE,OAAO,EAAE,KAAK,GAAG,UAAU,GAAG,KAAK,GAAG,UAAU,EAChD,iBAAiB,EAAE,MAAM,EACzB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EACnB,WAAW,EAAE,GAAG,GACf,MAAM,CAuDR;;;;AACD,wBAEE","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\nimport { chains, toBitcoinJS } from \"@hyperbitjs/chains\";\n\ninterface IUTXO {\n  address: string;\n  assetName: string;\n  txid: string;\n  outputIndex: number;\n  script: string;\n  satoshis: number;\n  height?: number;\n  value: number;\n}\n\nexport function sign(\n  network: \"tls\" | \"tls-test\" | \"evr\" | \"evr-test\",\n  rawTransactionHex: string,\n  UTXOs: Array<IUTXO>,\n  privateKeys: any\n): string {\n  const networkMapper = {\n    tls: chains.tls.main,\n    \"tls-test\": chains.tls.test,\n    evr: chains.evr.main,\n    \"evr-test\": chains.evr.test,\n  };\n\n  const coin = networkMapper[network];\n\n  if (!coin) {\n    throw new Error(\n      \"Validation error, first argument network must be tls, tls-test, evr or evr-test\"\n    );\n  }\n\n  //@ts-ignore\n  const TELESTAI = toBitcoinJS(coin);\n\n  const tx = bitcoin.Transaction.fromHex(rawTransactionHex);\n  const txb = bitcoin.TransactionBuilder.fromTransaction(tx, TELESTAI);\n\n  function getKeyPairByAddress(address) {\n    const wif = privateKeys[address];\n    const keyPair = bitcoin.ECPair.fromWIF(wif, TELESTAI);\n    return keyPair;\n  }\n\n  function getUTXO(transactionId, index) {\n    return UTXOs.find((utxo) => {\n      return utxo.txid === transactionId && utxo.outputIndex === index;\n    });\n  }\n\n  for (let i = 0; i < tx.ins.length; i++) {\n    const input = tx.ins[i];\n\n    const txId = Buffer.from(input.hash, \"hex\").reverse().toString(\"hex\");\n    const utxo = getUTXO(txId, input.index);\n    if (!utxo) {\n      throw Error(\"Could not find UTXO for input \" + input);\n    }\n    const address = utxo.address;\n    const keyPair = getKeyPairByAddress(address);\n\n    const signParams = {\n      prevOutScriptType: \"p2pkh\",\n      vin: i,\n      keyPair,\n      UTXO: utxo,\n    };\n    txb.sign(signParams);\n  }\n  const signedTxHex = txb.build().toHex();\n  return signedTxHex;\n}\nexport default {\n  sign,\n};\n"],"names":[],"version":3,"file":"types.d.ts.map"}